import 'package:flutter/foundation.dart';
import 'models/media_content.dart';
import 'models/player_config.dart';
import 'services/media_loader_service.dart';
import 'services/dome_projection_service.dart';

/// –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è FreeDome –ø–ª–µ–µ—Ä–∞
class FreeDomePlayerController extends ChangeNotifier {
  MediaContent? _currentContent;
  PlayerConfig _config = const PlayerConfig();
  bool _isLoading = false;
  bool _isPlaying = false;
  String? _error;

  final MediaLoaderService _mediaLoader = MediaLoaderService();
  final DomeProjectionService _domeService = DomeProjectionService();

  // –ì–µ—Ç—Ç–µ—Ä—ã
  MediaContent? get currentContent => _currentContent;
  PlayerConfig get config => _config;
  bool get isLoading => _isLoading;
  bool get isPlaying => _isPlaying;
  String? get error => _error;
  bool get hasContent => _currentContent != null;

  /// –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–¥–∏–∞ –∫–æ–Ω—Ç–µ–Ω—Ç
  Future<bool> loadContent(String filePath) async {
    try {
      _setLoading(true);
      _clearError();

      debugPrint('üîµ [PLAYER_CONTROLLER] Loading content: $filePath');

      final content = await _mediaLoader.loadMediaContent(filePath);
      if (content == null) {
        _setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç: $filePath');
        return false;
      }

      _currentContent = content;

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–ª–µ–µ—Ä–∞ –ø–æ–¥ —Ñ–æ—Ä–º–∞—Ç
      _autoConfigureForFormat(content.format);

      debugPrint('üü¢ [PLAYER_CONTROLLER] Content loaded: ${content.name}');

      notifyListeners();
      return true;
    } catch (e) {
      _setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: $e');
      return false;
    } finally {
      _setLoading(false);
    }
  }

  /// –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ MediaContent –æ–±—ä–µ–∫—Ç–∞
  void loadMediaContent(MediaContent content) {
    _currentContent = content;
    _autoConfigureForFormat(content.format);
    _clearError();
    notifyListeners();
  }

  /// –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–ª–µ–µ—Ä–∞
  void updateConfig(PlayerConfig config) {
    _config = config;
    notifyListeners();
  }

  /// –ù–∞—á–∞—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
  Future<void> play() async {
    if (_currentContent == null) return;

    try {
      _isPlaying = true;
      notifyListeners();

      // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –∫—É–ø–æ–ª—å–Ω–∞—è –ø—Ä–æ–µ–∫—Ü–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –∫—É–ø–æ–ª
      if (_config.enableDomeProjection && _config.domeConfig != null) {
        await _sendToDome();
      }

      debugPrint(
          'üü¢ [PLAYER_CONTROLLER] Started playing: ${_currentContent!.name}');
    } catch (e) {
      _setError('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: $e');
      _isPlaying = false;
      notifyListeners();
    }
  }

  /// –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
  void stop() {
    _isPlaying = false;
    notifyListeners();
    debugPrint('üî¥ [PLAYER_CONTROLLER] Stopped playing');
  }

  /// –ü–∞—É–∑–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
  void pause() {
    _isPlaying = false;
    notifyListeners();
    debugPrint('‚è∏Ô∏è [PLAYER_CONTROLLER] Paused playing');
  }

  /// –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
  void resume() {
    _isPlaying = true;
    notifyListeners();
    debugPrint('‚ñ∂Ô∏è [PLAYER_CONTROLLER] Resumed playing');
  }

  /// –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ/–ø–∞—É–∑—É
  void togglePlayPause() {
    if (_isPlaying) {
      pause();
    } else {
      play();
    }
  }

  /// –û—á–∏—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
  void clearContent() {
    _currentContent = null;
    _isPlaying = false;
    _clearError();
    notifyListeners();
  }

  /// –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
  void switchPlaybackMode(PlaybackMode mode) {
    if (_currentContent == null) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ä–µ–∂–∏–º–∞
    bool supported = false;
    switch (mode) {
      case PlaybackMode.screen:
        supported = true;
        break;
      case PlaybackMode.dome:
        supported = _currentContent!.supportsDomeProjection;
        break;
      case PlaybackMode.ar:
        supported = _currentContent!.supportsAR;
        break;
      case PlaybackMode.vr:
        supported = _currentContent!.supportsVR;
        break;
    }

    if (!supported) {
      _setError('–†–µ–∂–∏–º $mode –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞');
      return;
    }

    _currentContent = _currentContent!.copyWith(playbackMode: mode);

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–ª–µ–µ—Ä–∞
    switch (mode) {
      case PlaybackMode.screen:
        _config = _config.copyWith(
          enableDomeProjection: false,
          enableAR: false,
          enableVR: false,
        );
        break;
      case PlaybackMode.dome:
        _config = _config.copyWith(
          enableDomeProjection: true,
          enableAR: false,
          enableVR: false,
        );
        break;
      case PlaybackMode.ar:
        _config = _config.copyWith(
          enableDomeProjection: false,
          enableAR: true,
          enableVR: false,
        );
        break;
      case PlaybackMode.vr:
        _config = _config.copyWith(
          enableDomeProjection: false,
          enableAR: false,
          enableVR: true,
        );
        break;
    }

    notifyListeners();
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  List<PlaybackMode> getAvailablePlaybackModes() {
    if (_currentContent == null) return [PlaybackMode.screen];

    final modes = <PlaybackMode>[PlaybackMode.screen];

    if (_currentContent!.supportsDomeProjection) {
      modes.add(PlaybackMode.dome);
    }

    if (_currentContent!.supportsAR) {
      modes.add(PlaybackMode.ar);
    }

    if (_currentContent!.supportsVR) {
      modes.add(PlaybackMode.vr);
    }

    return modes;
  }

  /// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ–¥ —Ñ–æ—Ä–º–∞—Ç
  void _autoConfigureForFormat(MediaFormat format) {
    switch (format) {
      case MediaFormat.comics:
        _config = PlayerConfig.defaultComics;
        break;
      case MediaFormat.boranko:
        _config = _config.copyWith(
          enableDomeProjection: true,
          enableVR: true,
          backgroundColor: 0xFF000000,
        );
        break;
      case MediaFormat.collada:
      case MediaFormat.obj:
      case MediaFormat.gltf:
      case MediaFormat.glb:
        _config = PlayerConfig.default3D;
        break;
      case MediaFormat.unknown:
        _config = const PlayerConfig();
        break;
    }
  }

  /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –∫—É–ø–æ–ª
  Future<void> _sendToDome() async {
    if (_currentContent == null || _config.domeConfig == null) return;

    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫—É–ø–æ–ª—É
      final connected = await _domeService.initialize(_config.domeConfig!);
      if (!connected) {
        _setError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ FreeDome Engine');
        return;
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
      final sent = await _domeService.sendModel(_currentContent!);
      if (!sent) {
        _setError('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –∫—É–ø–æ–ª');
        return;
      }

      debugPrint('üü¢ [PLAYER_CONTROLLER] Content sent to dome successfully');
    } catch (e) {
      _setError('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫—É–ø–æ–ª: $e');
    }
  }

  /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
  void _setLoading(bool loading) {
    _isLoading = loading;
    notifyListeners();
  }

  /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—à–∏–±–∫—É
  void _setError(String error) {
    _error = error;
    debugPrint('üî¥ [PLAYER_CONTROLLER] Error: $error');
    notifyListeners();
  }

  /// –û—á–∏—Å—Ç–∏—Ç—å –æ—à–∏–±–∫—É
  void _clearError() {
    _error = null;
  }

  @override
  void dispose() {
    _domeService.disconnect();
    super.dispose();
  }
}
